/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package TRANSICION;

import DATABASE.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class M_RecidentesHabitaciones extends javax.swing.JPanel {

    /**
     * Creates new form M_RecidentesHabitaciones
     */
    public M_RecidentesHabitaciones() {
        initComponents();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblResidentesHab = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        tblResidentesHab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Habitación", "Capacidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResidentesHab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResidentesHabMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblResidentesHab);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblResidentesHabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResidentesHabMouseClicked
 
    }//GEN-LAST:event_tblResidentesHabMouseClicked

    
    
private void cargarTabla() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tblResidentesHab.getModel();
    modeloTabla.setRowCount(0);

    PreparedStatement ps;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int columnas;

    int[] anchos = {150, 100, 100};

    try {
        Connection con = Conexion.getConexion();
        ps = con.prepareStatement("SELECT r.nombre, h.numero, h.capacidad FROM residentes r JOIN habitaciones h ON r.habitacion = h.id");
        rs = ps.executeQuery();
        rsmd = rs.getMetaData();
        columnas = rsmd.getColumnCount();

        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int indice = 0; indice < columnas; indice++) {
                if (indice == 0) { // Columna del nombre
                    fila[indice] = rs.getObject(indice + 1);
                } else if (indice == 1) { // Columna del número de habitación
                    fila[indice] = rs.getObject(indice + 1);
                } else if (indice == 2) { // Columna de la capacidad
                    fila[indice] = rs.getObject(indice + 1);
                }
            }
            modeloTabla.addRow(fila);
        }

        for (int i = 0; i < tblResidentesHab.getColumnCount(); i++) {
            tblResidentesHab.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
}

    






private String obtenerNombreResidente(int residenteId) throws SQLException {
    String nombreResidente = "";
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT nombre FROM residentes WHERE id = ?");
    ps.setInt(1, residenteId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        nombreResidente = rs.getString("nombre");
    }
    return nombreResidente;
}

private int obtenerNumeroHabitacion(int habitacionId) throws SQLException {
    int numeroHabitacion = 0;
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT numero FROM habitaciones WHERE id = ?");
    ps.setInt(1, habitacionId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        numeroHabitacion = rs.getInt("numero");
    }
    return numeroHabitacion;
}

private int obtenerCapacidadHabitacion(int habitacionId) throws SQLException {
    int capacidadHabitacion = 0;
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT capacidad FROM habitaciones WHERE id = ?");
    ps.setInt(1, habitacionId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        capacidadHabitacion = rs.getInt("capacidad");
    }
    return capacidadHabitacion;
}



    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblResidentesHab;
    // End of variables declaration//GEN-END:variables
}
