/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package TRANSICION;

import DATABASE.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author rlope
 */
public class O_Residentes_Med extends javax.swing.JPanel {

    /**
     * Creates new form O_Residentes_Med
     */
    public O_Residentes_Med() {
        initComponents();
        cargarTabla();
        cargarTabla2();
        
        
        cargarTabla_tblMedicamentos1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Content = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblResidentesMed = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        txtMedicamento = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResidentesHab = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblMedicamentos = new javax.swing.JTable();

        tblResidentesMed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre del Residente", "Medicamento Asignado", "Cantidad Asignado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResidentesMed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResidentesMedMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblResidentesMed);
        if (tblResidentesMed.getColumnModel().getColumnCount() > 0) {
            tblResidentesMed.getColumnModel().getColumn(0).setHeaderValue("Código");
            tblResidentesMed.getColumnModel().getColumn(1).setHeaderValue("Nombre del Residente");
            tblResidentesMed.getColumnModel().getColumn(2).setHeaderValue("Medicamento Asignado");
            tblResidentesMed.getColumnModel().getColumn(3).setHeaderValue("Cantidad Asignado");
        }

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel2MouseMoved(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Cantidad: ");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Medicamento: ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Nombre: ");

        txtCantidad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtMedicamento.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtNombre.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                    .addComponent(txtMedicamento)
                    .addComponent(txtNombre))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMedicamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        tblResidentesHab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "fecha de nacimiento", "genero ", "fecha de ingreso", "Habitación", "adctividad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblResidentesHab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResidentesHabMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblResidentesHab);

        btnGuardar.setBackground(new java.awt.Color(0, 102, 255));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 102, 255));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(0, 102, 255));
        btnLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Linpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Medicamento");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Recidente");

        tblMedicamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMedicamentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMedicamentosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblMedicamentos);

        javax.swing.GroupLayout ContentLayout = new javax.swing.GroupLayout(Content);
        Content.setLayout(ContentLayout);
        ContentLayout.setHorizontalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(ContentLayout.createSequentialGroup()
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(33, 33, 33)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3))
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(248, Short.MAX_VALUE))
        );
        ContentLayout.setVerticalGroup(
            ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContentLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(ContentLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(ContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

 
        
        
        
        
        
        String nombreResidente = txtNombre.getText();
    String nombreMedicamento = txtMedicamento.getText();
    String cantidad = txtCantidad.getText();

    try {
        Connection con = Conexion.getConexion();

        // Verificar si el campo de cantidad contiene un número válido
        int cantidadInt;
        try {
            cantidadInt = Integer.parseInt(cantidad);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "El campo de cantidad debe contener solo números.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Obtener el ID del residente a partir del nombre
        PreparedStatement psResidente = con.prepareStatement("SELECT id FROM residentes WHERE nombre = ?");
        psResidente.setString(1, nombreResidente);
        ResultSet rsResidente = psResidente.executeQuery();

        if (rsResidente.next()) {
            int idResidente = rsResidente.getInt("id");

            // Obtener el ID y la cantidad del medicamento a partir del nombre
            PreparedStatement psMedicamento = con.prepareStatement("SELECT id, cantidad FROM medicamentos WHERE nombre = ?");
            psMedicamento.setString(1, nombreMedicamento);
            ResultSet rsMedicamento = psMedicamento.executeQuery();

            if (rsMedicamento.next()) {
                int idMedicamento = rsMedicamento.getInt("id");
                int cantidadMedicamento = rsMedicamento.getInt("cantidad");

                if (cantidadInt > 0) {
                    if (cantidadInt <= cantidadMedicamento) {
                        // Insertar el registro en la tabla "residentes_medicamentos"
                        PreparedStatement ps = con.prepareStatement("INSERT INTO residentes_medicamentos(residente_id, medicamento_id, cantidad) VALUES (?, ?, ?)");
                        ps.setInt(1, idResidente);
                        ps.setInt(2, idMedicamento);
                        ps.setInt(3, cantidadInt);
                        ps.executeUpdate();

                        // Reducir la cantidad del medicamento
                        int nuevaCantidad = cantidadMedicamento - cantidadInt;
                        PreparedStatement psActualizarCantidad = con.prepareStatement("UPDATE medicamentos SET cantidad = ? WHERE id = ?");
                        psActualizarCantidad.setInt(1, nuevaCantidad);
                        psActualizarCantidad.setInt(2, idMedicamento);
                        psActualizarCantidad.executeUpdate();

                        JOptionPane.showMessageDialog(null, "Registro Guardado. Se redujo la cantidad del medicamento.");
                        limpiar();
                        cargarTabla();
                        cargarTabla_tblMedicamentos1() ;
                    } else {
                        JOptionPane.showMessageDialog(null, "No hay suficiente cantidad del medicamento.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor que cero.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El medicamento no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El residente no existe.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
        
  
    

    }//GEN-LAST:event_btnGuardarActionPerformed

    
    
   
    
private void actualizarCantidadMedicamentoStock(String medicamento, int cantidad) {

}




    private int obtenerIdResidente(String nombre) throws SQLException {
    int idResidente = -1; // Valor predeterminado si no se encuentra el ID
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT id FROM residentes WHERE nombre = ?");
    ps.setString(1, nombre);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        idResidente = rs.getInt("id");
    }
    return idResidente;
}

private int obtenerIdMedicamento(String medicamento) throws SQLException {
    int idMedicamento = -1; // Valor predeterminado si no se encuentra el ID
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT id FROM medicamentos WHERE nombre = ?");
    ps.setString(1, medicamento);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        idMedicamento = rs.getInt("id");
    }
    return idMedicamento;
}
    private void modificarRegistro(int id, String nombre, String medicamento, String cantidad) {

}

    
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

int fila = tblResidentesMed.getSelectedRow();
    if (fila == -1) {
        //JOptionPane.showMessageDialog(null, "Seleccione una fila de la tabla");
        JOptionPane.showMessageDialog(null, "<html><body style='width: 250px; text-align: center;'>" +
                "<h2 style='color: #FF0000;'>Error</h2>" +
                "<p style='color: #808080;'>Seleccione una fila de la tabla.</p>" +
                "</body></html>", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int id = Integer.parseInt(tblResidentesMed.getValueAt(fila, 0).toString());

    eliminarRegistro(id);
    }//GEN-LAST:event_btnEliminarActionPerformed
private void eliminarRegistro(int id) {
    try {
        Connection con = Conexion.getConexion();
        PreparedStatement ps = con.prepareStatement("DELETE FROM residentes_medicamentos WHERE id=?");
        ps.setInt(1, id);
        ps.executeUpdate();

        //JOptionPane.showMessageDialog(null, "Registro Eliminado");
        JOptionPane.showMessageDialog(null, "<html><body style='width: 250px; text-align: center;'>" +
                "<h2 style='color: #00FF00;'>Éxito</h2>" +
                "<p style='color: #808080;'>Registro eliminado correctamente.</p>" +
                "</body></html>", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Limpiar los campos o realizar otras acciones necesarias
        // limpiar();
        cargarTabla();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
}

    
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
       limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void tblResidentesMedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResidentesMedMouseClicked


    }//GEN-LAST:event_tblResidentesMedMouseClicked

    private void tblResidentesHabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResidentesHabMouseClicked

    try {
    int fila = tblResidentesHab.getSelectedRow();
    int id = Integer.parseInt(tblResidentesHab.getValueAt(fila, 0).toString());
    PreparedStatement ps;
    ResultSet rs;

    Connection con = Conexion.getConexion();

    ps = con.prepareStatement("SELECT nombre FROM residentes WHERE id = ?");
    ps.setInt(1, id);
    rs = ps.executeQuery();

    if (rs.next()) {
        String nombreResidente = rs.getString("nombre");
        txtNombre.setText(nombreResidente);
    }

} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, e.toString());
}
  
    }//GEN-LAST:event_tblResidentesHabMouseClicked

    private void jPanel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseMoved

    
    
    
    private void tblMedicamentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMedicamentosMouseClicked

        
        
          try {
        int fila = tblMedicamentos.getSelectedRow();
        int id = Integer.parseInt(tblMedicamentos.getValueAt(fila, 0).toString());
        PreparedStatement ps;
        ResultSet rs;

        Connection con = Conexion.getConexion();

        ps = con.prepareStatement("SELECT nombre FROM medicamentos WHERE id = ?");
        ps.setInt(1, id);
        rs = ps.executeQuery();

        while (rs.next()) {
            txtMedicamento.setText(rs.getString("nombre"));
            //txtCantidad.setText(String.valueOf(rs.getInt("cantidad")));
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
        
        
        

    }//GEN-LAST:event_tblMedicamentosMouseClicked

  


    
    
    
    
    private void cargarTabla2() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tblResidentesHab.getModel();
    modeloTabla.setRowCount(0);

    PreparedStatement ps;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int columnas;

    int[] anchos = {30, 100, 100, 100, 100, 100, 200};

    for (int i = 0; i < tblResidentesHab.getColumnCount(); i++) {
        tblResidentesHab.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
    }

    try {
        Connection con = Conexion.getConexion();
        ps = con.prepareStatement("SELECT id, nombre, fecha_nacimiento, genero, fecha_ingreso, habitacion, descri_de_actividad FROM residentes");
        rs = ps.executeQuery();
        rsmd = rs.getMetaData();
        columnas = rsmd.getColumnCount();

        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int indice = 0; indice < columnas; indice++) {
                fila[indice] = rs.getObject(indice + 1);
            }
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
}

    
    private void cargarTabla() {
DefaultTableModel modeloTabla = (DefaultTableModel) tblResidentesMed.getModel();
    modeloTabla.setRowCount(0);

    PreparedStatement ps;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int columnas;

    int[] anchos = {30, 50, 50, 150};

    for (int i = 0; i < tblResidentesMed.getColumnCount(); i++) {
        tblResidentesMed.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
    }

    try {
        Connection con = Conexion.getConexion();
        ps = con.prepareStatement("SELECT id, residente_id, medicamento_id, cantidad FROM residentes_medicamentos");
        rs = ps.executeQuery();
        rsmd = rs.getMetaData();
        columnas = rsmd.getColumnCount();

        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int indice = 0; indice < columnas; indice++) {
                if (indice == 1) { // Columna del residente_id
                    int residenteId = rs.getInt(indice + 1);
                    String nombreResidente = obtenerNombreResidente(residenteId); // Obtener el nombre del residente
                    fila[indice] = nombreResidente;
                } else if (indice == 2) { // Columna del medicamento_id
                    int medicamentoId = rs.getInt(indice + 1);
                    String nombreMedicamento = obtenerNombreMedicamento(medicamentoId); // Obtener el nombre del medicamento
                    fila[indice] = nombreMedicamento;
                } else if (indice == 3) { // Columna de cantidad
                    int cantidad = rs.getInt(indice + 1);
                    int cantidadPositiva = Math.abs(cantidad); // Convertir a valor absoluto
                    fila[indice] = String.format("%,d", cantidadPositiva);
                } else {
                    fila[indice] = rs.getObject(indice + 1);
                }
            }
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }
}

  
    
private String obtenerNombreResidente(int residenteId) throws SQLException {
    String nombreResidente = "";
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT nombre FROM residentes WHERE id = ?");
    ps.setInt(1, residenteId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        nombreResidente = rs.getString("nombre");
    }
    return nombreResidente;
}

private String obtenerNombreMedicamento(int medicamentoId) throws SQLException {
    String nombreMedicamento = "";
    Connection con = Conexion.getConexion();
    PreparedStatement ps = con.prepareStatement("SELECT nombre FROM medicamentos WHERE id = ?");
    ps.setInt(1, medicamentoId);
    ResultSet rs = ps.executeQuery();
    if (rs.next()) {
        nombreMedicamento = rs.getString("nombre");
    }
    return nombreMedicamento;
}
private void limpiar(){
        txtNombre.setText("");
        txtMedicamento.setText("");
        txtCantidad.setText("");
        
    }



private void cargarTabla_tblMedicamentos1() {

    
    
    
    
    
    
    
    
    
  DefaultTableModel modeloTabla = (DefaultTableModel) tblMedicamentos.getModel();
    modeloTabla.setRowCount(0);

    PreparedStatement ps;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int columnas;

    int[] anchos = {30, 80, 50};

    for (int i = 0; i < tblMedicamentos.getColumnCount(); i++) {
        tblMedicamentos.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
    }

    try {
        Connection con = Conexion.getConexion();
        ps = con.prepareStatement("SELECT id, nombre, cantidad FROM medicamentos");
        rs = ps.executeQuery();
        rsmd = rs.getMetaData();
        columnas = rsmd.getColumnCount();

        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int indice = 0; indice < columnas; indice++) {
                fila[indice] = rs.getObject(indice + 1);
            }
            modeloTabla.addRow(fila);
        }

        // Restar la cantidad guardada a la cantidad en la tabla
        int filaSeleccionada = tblMedicamentos.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idMedicamento = (int) tblMedicamentos.getValueAt(filaSeleccionada, 0);
            int cantidadGuardada = Integer.parseInt(txtCantidad.getText());
            int cantidadActual = (int) tblMedicamentos.getValueAt(filaSeleccionada, 2);
            int nuevaCantidad = cantidadActual - cantidadGuardada;
            tblMedicamentos.setValueAt(nuevaCantidad, filaSeleccionada, 2);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e.toString());
    }  
    
    
    

  
    
}
  


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Content;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblMedicamentos;
    private javax.swing.JTable tblResidentesHab;
    private javax.swing.JTable tblResidentesMed;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtMedicamento;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
